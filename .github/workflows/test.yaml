name: Test

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - db: "mariadb:10.0"
            py: "3.9"

          - db: "mariadb:10.3"
            py: "3.8"
            mariadb_auth: true

          - db: "mariadb:10.5"
            py: "3.7"
            mariadb_auth: true

          - db: "mysql:5.6"
            py: "3.6"

          - db: "mysql:5.7"
            py: "pypy-3.6"

          - db: "mysql:8.0"
            py: "3.9"
            mysql_auth: true

    services:
      mysql:
        image: "${{ matrix.db }}"
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
        options: "--name=mysqld"

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.py }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.py }}

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-1
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependency
        run: |
          pip install -U cryptography PyNaCl pytest pytest-cov coveralls

      - name: Set up MySQL
        run: |
          while :
          do
              sleep 1
              mysql -h127.0.0.1 -uroot -e 'select version()' && break
          done
          mysql -h127.0.0.1 -uroot -e "SET GLOBAL local_infile=on"
          mysql -h127.0.0.1 -uroot -e 'create database test1 DEFAULT CHARACTER SET utf8mb4'
          mysql -h127.0.0.1 -uroot -e 'create database test2 DEFAULT CHARACTER SET utf8mb4'
          mysql -h127.0.0.1 -uroot -e "create user test2           identified ${WITH_PLUGIN} by 'some password'; grant all on test2.* to test2;"
          mysql -h127.0.0.1 -uroot -e "create user test2@localhost identified ${WITH_PLUGIN} by 'some password'; grant all on test2.* to test2@localhost;"
          cp ci/docker.json pymysql/tests/databases.json

      - name: Run test
        run: |
          pytest -v --cov --cov-config .coveragerc pymysql

      - name: Run MySQL8 auth test
        if: ${{ matrix.mysql_auth }}
        run: |
          docker cp mysqld:/var/lib/mysql/public_key.pem "${HOME}"
          docker cp mysqld:/var/lib/mysql/ca.pem "${HOME}"
          docker cp mysqld:/var/lib/mysql/server-cert.pem "${HOME}"
          docker cp mysqld:/var/lib/mysql/client-key.pem "${HOME}"
          docker cp mysqld:/var/lib/mysql/client-cert.pem "${HOME}"
          mysql -uroot -h127.0.0.1 -e '
              CREATE USER
                  user_sha256   IDENTIFIED WITH "sha256_password" BY "pass_sha256_01234567890123456789",
                  nopass_sha256 IDENTIFIED WITH "sha256_password",
                  user_caching_sha2   IDENTIFIED WITH "caching_sha2_password" BY "pass_caching_sha2_01234567890123456789",
                  nopass_caching_sha2 IDENTIFIED WITH "caching_sha2_password"
                  PASSWORD EXPIRE NEVER;
              GRANT RELOAD ON *.* TO user_caching_sha2;'
          pytest -v --cov --cov-config .coveragerc tests/test_auth.py;

      - name: Run MariaDB auth test
        if: ${{ matrix.mariadb_auth }}
        run: |
          mysql -uroot -h127.0.0.1 -e '
              INSTALL SONAME "auth_ed25519";
              CREATE FUNCTION ed25519_password RETURNS STRING SONAME "auth_ed25519.so";'
          # we need to pass the hashed password manually until 10.4, so hide it here
          mysql -uroot -h127.0.0.1 -sNe "SELECT CONCAT('CREATE USER nopass_ed25519 IDENTIFIED VIA ed25519 USING \"',ed25519_password(\"\"),'\";');" | mysql -uroot -h127.0.0.1
          mysql -uroot -h127.0.0.1 -sNe "SELECT CONCAT('CREATE USER user_ed25519 IDENTIFIED VIA ed25519 USING \"',ed25519_password(\"pass_ed25519\"),'\";');" | mysql -uroot -h127.0.0.1
          pytest -v --cov --cov-config .coveragerc tests/test_mariadb_auth.py

      - name: Report coverage
        run: coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: ${{ matrix.test-name }}
          COVERALLS_PARALLEL: true

  coveralls:
    name: Finish coveralls
    runs-on: ubuntu-20.04
    needs: test
    container: python:3-slim
    steps:
    - name: Finished
      run: |
        pip3 install --upgrade coveralls
        coveralls --finish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
